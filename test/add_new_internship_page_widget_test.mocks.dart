// Mocks generated by Mockito 5.2.0 from annotations
// in internship_app_fis/test/add_new_internship_page_widget_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;
import 'dart:typed_data' as _i12;

import 'package:file/file.dart' as _i4;
import 'package:flutter/widgets.dart' as _i16;
import 'package:flutter_cache_manager/flutter_cache_manager.dart' as _i5;
import 'package:flutter_cache_manager/src/cache_store.dart' as _i2;
import 'package:flutter_cache_manager/src/web/web_helper.dart' as _i3;
import 'package:internship_app_fis/models/internship.dart' as _i11;
import 'package:internship_app_fis/models/user.dart' as _i9;
import 'package:internship_app_fis/models/user_profile.dart' as _i14;
import 'package:internship_app_fis/services/auth_service.dart' as _i15;
import 'package:internship_app_fis/services/internship_service.dart' as _i10;
import 'package:internship_app_fis/services/user_profile_service.dart' as _i13;
import 'package:internship_app_fis/services/user_service.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mysql1/mysql1.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeCacheStore_0 extends _i1.Fake implements _i2.CacheStore {}

class _FakeWebHelper_1 extends _i1.Fake implements _i3.WebHelper {}

class _FakeFile_2 extends _i1.Fake implements _i4.File {}

class _FakeFileInfo_3 extends _i1.Fake implements _i5.FileInfo {}

class _FakeIterator_4<E> extends _i1.Fake implements Iterator<E> {}

class _FakeResultRow_5 extends _i1.Fake implements _i6.ResultRow {}

/// A class which mocks [UserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserService extends _i1.Mock implements _i7.UserService {
  MockUserService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i9.User?> getUser(_i9.User? user) =>
      (super.noSuchMethod(Invocation.method(#getUser, [user]),
          returnValue: Future<_i9.User?>.value()) as _i8.Future<_i9.User?>);
  @override
  _i8.Future<bool> usernameExists(_i9.User? user) =>
      (super.noSuchMethod(Invocation.method(#usernameExists, [user]),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  _i8.Future<void> addUser(_i9.User? user) =>
      (super.noSuchMethod(Invocation.method(#addUser, [user]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> deleteUser(_i9.User? user) =>
      (super.noSuchMethod(Invocation.method(#deleteUser, [user]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
}

/// A class which mocks [InternshipService].
///
/// See the documentation for Mockito's code generation for more information.
class MockInternshipService extends _i1.Mock implements _i10.InternshipService {
  MockInternshipService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<void> addInternship(_i11.Internship? internship) =>
      (super.noSuchMethod(Invocation.method(#addInternship, [internship]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<List<_i11.Internship>> getAllCompanyInternships(
          _i9.Company? company) =>
      (super.noSuchMethod(
              Invocation.method(#getAllCompanyInternships, [company]),
              returnValue:
                  Future<List<_i11.Internship>>.value(<_i11.Internship>[]))
          as _i8.Future<List<_i11.Internship>>);
  @override
  _i8.Future<List<_i11.Internship>> getAllInternships() => (super.noSuchMethod(
          Invocation.method(#getAllInternships, []),
          returnValue: Future<List<_i11.Internship>>.value(<_i11.Internship>[]))
      as _i8.Future<List<_i11.Internship>>);
  @override
  _i8.Future<List<_i11.Internship>> getStudentNotAppliedInternship(
          _i9.Student? user) =>
      (super.noSuchMethod(
              Invocation.method(#getStudentNotAppliedInternship, [user]),
              returnValue:
                  Future<List<_i11.Internship>>.value(<_i11.Internship>[]))
          as _i8.Future<List<_i11.Internship>>);
  @override
  _i8.Future<void> deleteInternship(_i11.Internship? internship) =>
      (super.noSuchMethod(Invocation.method(#deleteInternship, [internship]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> updateInternship(_i11.Internship? internship) =>
      (super.noSuchMethod(Invocation.method(#updateInternship, [internship]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
}

/// A class which mocks [DefaultCacheManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockDefaultCacheManager extends _i1.Mock
    implements _i5.DefaultCacheManager {
  MockDefaultCacheManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CacheStore get store => (super.noSuchMethod(Invocation.getter(#store),
      returnValue: _FakeCacheStore_0()) as _i2.CacheStore);
  @override
  _i3.WebHelper get webHelper =>
      (super.noSuchMethod(Invocation.getter(#webHelper),
          returnValue: _FakeWebHelper_1()) as _i3.WebHelper);
  @override
  _i8.Future<_i4.File> getSingleFile(String? url,
          {String? key, Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getSingleFile, [url], {#key: key, #headers: headers}),
              returnValue: Future<_i4.File>.value(_FakeFile_2()))
          as _i8.Future<_i4.File>);
  @override
  _i8.Stream<_i5.FileInfo> getFile(String? url,
          {String? key, Map<String, String>? headers}) =>
      (super.noSuchMethod(
          Invocation.method(#getFile, [url], {#key: key, #headers: headers}),
          returnValue:
              Stream<_i5.FileInfo>.empty()) as _i8.Stream<_i5.FileInfo>);
  @override
  _i8.Stream<_i5.FileResponse> getFileStream(String? url,
          {String? key,
          Map<String, String>? headers,
          bool? withProgress = false}) =>
      (super.noSuchMethod(
              Invocation.method(#getFileStream, [url],
                  {#key: key, #headers: headers, #withProgress: withProgress}),
              returnValue: Stream<_i5.FileResponse>.empty())
          as _i8.Stream<_i5.FileResponse>);
  @override
  _i8.Future<_i5.FileInfo> downloadFile(String? url,
          {String? key,
          Map<String, String>? authHeaders,
          bool? force = false}) =>
      (super.noSuchMethod(
              Invocation.method(#downloadFile, [url],
                  {#key: key, #authHeaders: authHeaders, #force: force}),
              returnValue: Future<_i5.FileInfo>.value(_FakeFileInfo_3()))
          as _i8.Future<_i5.FileInfo>);
  @override
  _i8.Future<_i5.FileInfo?> getFileFromCache(String? key,
          {bool? ignoreMemCache = false}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getFileFromCache, [key], {#ignoreMemCache: ignoreMemCache}),
              returnValue: Future<_i5.FileInfo?>.value())
          as _i8.Future<_i5.FileInfo?>);
  @override
  _i8.Future<_i5.FileInfo?> getFileFromMemory(String? key) =>
      (super.noSuchMethod(Invocation.method(#getFileFromMemory, [key]),
              returnValue: Future<_i5.FileInfo?>.value())
          as _i8.Future<_i5.FileInfo?>);
  @override
  _i8.Future<_i4.File> putFile(String? url, _i12.Uint8List? fileBytes,
          {String? key,
          String? eTag,
          Duration? maxAge = const Duration(days: 30),
          String? fileExtension = r'file'}) =>
      (super.noSuchMethod(
              Invocation.method(#putFile, [
                url,
                fileBytes
              ], {
                #key: key,
                #eTag: eTag,
                #maxAge: maxAge,
                #fileExtension: fileExtension
              }),
              returnValue: Future<_i4.File>.value(_FakeFile_2()))
          as _i8.Future<_i4.File>);
  @override
  _i8.Future<_i4.File> putFileStream(String? url, _i8.Stream<List<int>>? source,
          {String? key,
          String? eTag,
          Duration? maxAge = const Duration(days: 30),
          String? fileExtension = r'file'}) =>
      (super.noSuchMethod(
              Invocation.method(#putFileStream, [
                url,
                source
              ], {
                #key: key,
                #eTag: eTag,
                #maxAge: maxAge,
                #fileExtension: fileExtension
              }),
              returnValue: Future<_i4.File>.value(_FakeFile_2()))
          as _i8.Future<_i4.File>);
  @override
  _i8.Future<void> removeFile(String? key) =>
      (super.noSuchMethod(Invocation.method(#removeFile, [key]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> emptyCache() =>
      (super.noSuchMethod(Invocation.method(#emptyCache, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> dispose() =>
      (super.noSuchMethod(Invocation.method(#dispose, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Stream<_i5.FileResponse> getImageFile(String? url,
          {String? key,
          Map<String, String>? headers,
          bool? withProgress = false,
          int? maxHeight,
          int? maxWidth}) =>
      (super.noSuchMethod(
              Invocation.method(#getImageFile, [
                url
              ], {
                #key: key,
                #headers: headers,
                #withProgress: withProgress,
                #maxHeight: maxHeight,
                #maxWidth: maxWidth
              }),
              returnValue: Stream<_i5.FileResponse>.empty())
          as _i8.Stream<_i5.FileResponse>);
}

/// A class which mocks [UserProfileService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserProfileService extends _i1.Mock
    implements _i13.UserProfileService {
  MockUserProfileService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i14.UserProfile?> getUserProfileById(_i9.User? user) =>
      (super.noSuchMethod(Invocation.method(#getUserProfileById, [user]),
              returnValue: Future<_i14.UserProfile?>.value())
          as _i8.Future<_i14.UserProfile?>);
  @override
  _i8.Future<void> addUserProfile(_i14.UserProfile? profile) =>
      (super.noSuchMethod(Invocation.method(#addUserProfile, [profile]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<List<_i14.CompanyProfile>> getAllCompanyProfiles() =>
      (super.noSuchMethod(Invocation.method(#getAllCompanyProfiles, []),
              returnValue: Future<List<_i14.CompanyProfile>>.value(
                  <_i14.CompanyProfile>[]))
          as _i8.Future<List<_i14.CompanyProfile>>);
  @override
  _i8.Future<List<_i14.StudentProfile>> getAcceptedParticipantsList(
          _i11.Internship? internship) =>
      (super.noSuchMethod(
              Invocation.method(#getAcceptedParticipantsList, [internship]),
              returnValue: Future<List<_i14.StudentProfile>>.value(
                  <_i14.StudentProfile>[]))
          as _i8.Future<List<_i14.StudentProfile>>);
  @override
  _i8.Future<List<_i14.StudentProfile>> getStudentProfilesByInternshipId(
          _i11.Internship? internship) =>
      (super.noSuchMethod(
          Invocation.method(#getStudentProfilesByInternshipId, [internship]),
          returnValue: Future<List<_i14.StudentProfile>>.value(
              <_i14.StudentProfile>[])) as _i8
          .Future<List<_i14.StudentProfile>>);
  @override
  _i8.Future<void> addAcceptedParticipantsList(
          _i11.Internship? internship, List<_i14.UserProfile>? userProfiles) =>
      (super.noSuchMethod(
          Invocation.method(
              #addAcceptedParticipantsList, [internship, userProfiles]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i15.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i9.User?> signupUser() =>
      (super.noSuchMethod(Invocation.method(#signupUser, []),
          returnValue: Future<_i9.User?>.value()) as _i8.Future<_i9.User?>);
  @override
  _i8.Future<_i9.User?> loginUser() =>
      (super.noSuchMethod(Invocation.method(#loginUser, []),
          returnValue: Future<_i9.User?>.value()) as _i8.Future<_i9.User?>);
}

/// A class which mocks [Results].
///
/// See the documentation for Mockito's code generation for more information.
class MockResults extends _i1.Mock implements _i6.Results {
  MockResults() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i6.Field> get fields => (super.noSuchMethod(Invocation.getter(#fields),
      returnValue: <_i6.Field>[]) as List<_i6.Field>);
  @override
  Iterator<_i6.ResultRow> get iterator =>
      (super.noSuchMethod(Invocation.getter(#iterator),
              returnValue: _FakeIterator_4<_i6.ResultRow>())
          as Iterator<_i6.ResultRow>);
  @override
  int get length =>
      (super.noSuchMethod(Invocation.getter(#length), returnValue: 0) as int);
  @override
  bool get isEmpty =>
      (super.noSuchMethod(Invocation.getter(#isEmpty), returnValue: false)
          as bool);
  @override
  bool get isNotEmpty =>
      (super.noSuchMethod(Invocation.getter(#isNotEmpty), returnValue: false)
          as bool);
  @override
  _i6.ResultRow get first => (super.noSuchMethod(Invocation.getter(#first),
      returnValue: _FakeResultRow_5()) as _i6.ResultRow);
  @override
  _i6.ResultRow get last => (super.noSuchMethod(Invocation.getter(#last),
      returnValue: _FakeResultRow_5()) as _i6.ResultRow);
  @override
  _i6.ResultRow get single => (super.noSuchMethod(Invocation.getter(#single),
      returnValue: _FakeResultRow_5()) as _i6.ResultRow);
  @override
  Iterable<R> cast<R>() =>
      (super.noSuchMethod(Invocation.method(#cast, []), returnValue: <R>[])
          as Iterable<R>);
  @override
  Iterable<_i6.ResultRow> followedBy(Iterable<_i6.ResultRow>? other) =>
      (super.noSuchMethod(Invocation.method(#followedBy, [other]),
          returnValue: <_i6.ResultRow>[]) as Iterable<_i6.ResultRow>);
  @override
  Iterable<T> map<T>(T Function(_i6.ResultRow)? toElement) =>
      (super.noSuchMethod(Invocation.method(#map, [toElement]),
          returnValue: <T>[]) as Iterable<T>);
  @override
  Iterable<_i6.ResultRow> where(bool Function(_i6.ResultRow)? test) =>
      (super.noSuchMethod(Invocation.method(#where, [test]),
          returnValue: <_i6.ResultRow>[]) as Iterable<_i6.ResultRow>);
  @override
  Iterable<T> whereType<T>() =>
      (super.noSuchMethod(Invocation.method(#whereType, []), returnValue: <T>[])
          as Iterable<T>);
  @override
  Iterable<T> expand<T>(Iterable<T> Function(_i6.ResultRow)? toElements) =>
      (super.noSuchMethod(Invocation.method(#expand, [toElements]),
          returnValue: <T>[]) as Iterable<T>);
  @override
  bool contains(Object? element) =>
      (super.noSuchMethod(Invocation.method(#contains, [element]),
          returnValue: false) as bool);
  @override
  void forEach(void Function(_i6.ResultRow)? action) =>
      super.noSuchMethod(Invocation.method(#forEach, [action]),
          returnValueForMissingStub: null);
  @override
  _i6.ResultRow reduce(
          _i6.ResultRow Function(_i6.ResultRow, _i6.ResultRow)? combine) =>
      (super.noSuchMethod(Invocation.method(#reduce, [combine]),
          returnValue: _FakeResultRow_5()) as _i6.ResultRow);
  @override
  T fold<T>(T? initialValue, T Function(T, _i6.ResultRow)? combine) =>
      throw UnsupportedError(
          '\'fold\' cannot be used without a mockito fallback generator.');
  @override
  bool every(bool Function(_i6.ResultRow)? test) =>
      (super.noSuchMethod(Invocation.method(#every, [test]), returnValue: false)
          as bool);
  @override
  String join([String? separator = r'']) => (super
          .noSuchMethod(Invocation.method(#join, [separator]), returnValue: '')
      as String);
  @override
  bool any(bool Function(_i6.ResultRow)? test) =>
      (super.noSuchMethod(Invocation.method(#any, [test]), returnValue: false)
          as bool);
  @override
  List<_i6.ResultRow> toList({bool? growable = true}) =>
      (super.noSuchMethod(Invocation.method(#toList, [], {#growable: growable}),
          returnValue: <_i6.ResultRow>[]) as List<_i6.ResultRow>);
  @override
  Set<_i6.ResultRow> toSet() =>
      (super.noSuchMethod(Invocation.method(#toSet, []),
          returnValue: <_i6.ResultRow>{}) as Set<_i6.ResultRow>);
  @override
  Iterable<_i6.ResultRow> take(int? count) =>
      (super.noSuchMethod(Invocation.method(#take, [count]),
          returnValue: <_i6.ResultRow>[]) as Iterable<_i6.ResultRow>);
  @override
  Iterable<_i6.ResultRow> takeWhile(bool Function(_i6.ResultRow)? test) =>
      (super.noSuchMethod(Invocation.method(#takeWhile, [test]),
          returnValue: <_i6.ResultRow>[]) as Iterable<_i6.ResultRow>);
  @override
  Iterable<_i6.ResultRow> skip(int? count) =>
      (super.noSuchMethod(Invocation.method(#skip, [count]),
          returnValue: <_i6.ResultRow>[]) as Iterable<_i6.ResultRow>);
  @override
  Iterable<_i6.ResultRow> skipWhile(bool Function(_i6.ResultRow)? test) =>
      (super.noSuchMethod(Invocation.method(#skipWhile, [test]),
          returnValue: <_i6.ResultRow>[]) as Iterable<_i6.ResultRow>);
  @override
  _i6.ResultRow firstWhere(bool Function(_i6.ResultRow)? test,
          {_i6.ResultRow Function()? orElse}) =>
      (super.noSuchMethod(
          Invocation.method(#firstWhere, [test], {#orElse: orElse}),
          returnValue: _FakeResultRow_5()) as _i6.ResultRow);
  @override
  _i6.ResultRow lastWhere(bool Function(_i6.ResultRow)? test,
          {_i6.ResultRow Function()? orElse}) =>
      (super.noSuchMethod(
          Invocation.method(#lastWhere, [test], {#orElse: orElse}),
          returnValue: _FakeResultRow_5()) as _i6.ResultRow);
  @override
  _i6.ResultRow singleWhere(bool Function(_i6.ResultRow)? test,
          {_i6.ResultRow Function()? orElse}) =>
      (super.noSuchMethod(
          Invocation.method(#singleWhere, [test], {#orElse: orElse}),
          returnValue: _FakeResultRow_5()) as _i6.ResultRow);
  @override
  _i6.ResultRow elementAt(int? index) =>
      (super.noSuchMethod(Invocation.method(#elementAt, [index]),
          returnValue: _FakeResultRow_5()) as _i6.ResultRow);
}

/// A class which mocks [NavigatorObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorObserver extends _i1.Mock implements _i16.NavigatorObserver {
  @override
  void didPush(
          _i16.Route<dynamic>? route, _i16.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPush, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didPop(_i16.Route<dynamic>? route, _i16.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPop, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didRemove(
          _i16.Route<dynamic>? route, _i16.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didRemove, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didReplace(
          {_i16.Route<dynamic>? newRoute, _i16.Route<dynamic>? oldRoute}) =>
      super.noSuchMethod(
          Invocation.method(
              #didReplace, [], {#newRoute: newRoute, #oldRoute: oldRoute}),
          returnValueForMissingStub: null);
  @override
  void didStartUserGesture(
          _i16.Route<dynamic>? route, _i16.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(
          Invocation.method(#didStartUserGesture, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didStopUserGesture() =>
      super.noSuchMethod(Invocation.method(#didStopUserGesture, []),
          returnValueForMissingStub: null);
}
