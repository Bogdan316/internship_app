// Mocks generated by Mockito 5.1.0 from annotations
// in internship_app_fis/test/login_page_widget_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:internship_app_fis/dao/base_dao.dart' as _i2;
import 'package:internship_app_fis/models/user.dart' as _i6;
import 'package:internship_app_fis/services/user_service.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mysql1/mysql1.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeBaseDao_0 extends _i1.Fake implements _i2.BaseDao {}

class _FakeResults_1 extends _i1.Fake implements _i3.Results {}

/// A class which mocks [UserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserService extends _i1.Mock implements _i4.UserService {
  MockUserService(MockMySqlConnection mockMySqlConnection) {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BaseDao get _dao => (super.noSuchMethod(Invocation.getter(#dao),
      returnValue: _FakeBaseDao_0()) as _i2.BaseDao);
  @override
  _i5.Future<_i6.User?> getUser(_i6.User? user) =>
      (super.noSuchMethod(Invocation.method(#getUser, [user]),
          returnValue: Future<_i6.User?>.value()) as _i5.Future<_i6.User?>);
  @override
  _i5.Future<bool> usernameExists(_i6.User? user) =>
      (super.noSuchMethod(Invocation.method(#usernameExists, [user]),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<void> addUser(_i6.User? user) =>
      (super.noSuchMethod(Invocation.method(#addUser, [user]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> deleteUser(_i6.User? user) =>
      (super.noSuchMethod(Invocation.method(#deleteUser, [user]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
}

/// A class which mocks [MySqlConnection].
///
/// See the documentation for Mockito's code generation for more information.
class MockMySqlConnection extends _i1.Mock implements _i3.MySqlConnection {
  MockMySqlConnection() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<dynamic> close() =>
      (super.noSuchMethod(Invocation.method(#close, []),
          returnValue: Future<dynamic>.value()) as _i5.Future<dynamic>);
  @override
  _i5.Future<_i3.Results> query(String? sql, [List<Object?>? values]) =>
      (super.noSuchMethod(Invocation.method(#query, [sql, values]),
              returnValue: Future<_i3.Results>.value(_FakeResults_1()))
          as _i5.Future<_i3.Results>);
  @override
  _i5.Future<List<_i3.Results>> queryMulti(
          String? sql, Iterable<List<Object?>>? values) =>
      (super.noSuchMethod(Invocation.method(#queryMulti, [sql, values]),
              returnValue: Future<List<_i3.Results>>.value(<_i3.Results>[]))
          as _i5.Future<List<_i3.Results>>);
  @override
  _i5.Future<dynamic> transaction(Function? queryBlock) =>
      (super.noSuchMethod(Invocation.method(#transaction, [queryBlock]),
          returnValue: Future<dynamic>.value()) as _i5.Future<dynamic>);
}
